"""Change trending to boolean

Revision ID: 9fc7de7517f6
Revises: 48fcc7f42a09
Create Date: 2025-06-02 10:59:04.360894

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "9fc7de7517f6"
down_revision: Union[str, None] = "48fcc7f42a09"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Drop tables that reference agents.name first
    op.drop_index("ix_reviews_id", table_name="reviews")
    op.drop_table("reviews")

    op.drop_index("ix_ratings_id", table_name="ratings")
    op.drop_table("ratings")

    op.drop_index("ix_highlights_id", table_name="highlights")
    op.drop_table("highlights")

    # Now safe to drop indexes on agents table
    op.drop_index("ix_agents_id", table_name="agents")
    op.drop_index("ix_agents_name", table_name="agents")
    op.drop_table("agents")

    # Drop indexes and table users (no dependencies shown here)
    op.drop_index("ix_users_email", table_name="users")
    op.drop_index("ix_users_username", table_name="users")
    op.drop_table("users")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "reviews",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "agent_name", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "review",
            sa.VARCHAR(length=120),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["agent_name"],
            ["agents.name"],
            name="reviews_agent_name_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="reviews_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="reviews_pkey"),
    )
    op.create_index("ix_reviews_id", "reviews", ["id"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "first_name", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "last_name", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "username", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "hashed_password",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "is_admin", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_users_username", "users", ["username"], unique=True)
    op.create_index("ix_users_email", "users", ["email"], unique=True)
    op.create_table(
        "agents",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('agents_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "description",
            sa.VARCHAR(length=1000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "homepage_url",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "category",
            sa.VARCHAR(length=1000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "source",
            sa.VARCHAR(length=1000),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "trending", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="agents_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_agents_name", "agents", ["name"], unique=True)
    op.create_index("ix_agents_id", "agents", ["id"], unique=False)
    op.create_table(
        "highlights",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "agent_name", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["agent_name"], ["agents.name"], name="highlights_agent_name_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="highlights_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="highlights_pkey"),
        sa.UniqueConstraint(
            "user_id",
            "agent_name",
            name="_user_agent_highlight_uc",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index("ix_highlights_id", "highlights", ["id"], unique=False)
    op.create_table(
        "ratings",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "agent_name", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("rating", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.CheckConstraint(
            "rating >= 1 AND rating <= 5", name="check_rating_range"
        ),
        sa.ForeignKeyConstraint(
            ["agent_name"],
            ["agents.name"],
            name="ratings_agent_name_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="ratings_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="ratings_pkey"),
        sa.UniqueConstraint(
            "user_id",
            "agent_name",
            name="_user_agent_rating_uc",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index("ix_ratings_id", "ratings", ["id"], unique=False)
    # ### end Alembic commands ###
